[
  {
    "id": "web-001",
    "question": "What is the most effective method for discovering hidden parameters in web applications?",
    "hints": ["Brute-force approaches", "Common parameter names", "Analysis of JavaScript files"],
    "answer": "The most effective methods include: 1) Using tools like Arjun or Param Miner to brute-force common parameter names; 2) Analyzing JavaScript files for API endpoints and hidden parameters; 3) Differential analysis by comparing responses with and without parameters; 4) Monitoring network traffic during application usage to identify less obvious parameters.",
    "categories": ["web-app", "reconnaissance", "parameter-discovery"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "useful",
    "created_at": "2025-09-09T10:00:00Z",
    "meta": {"review_count": 0, "attack_phase": "reconnaissance"}
  },
  {
    "id": "web-002",
    "question": "How would you exploit insecure direct object references (IDOR) in a REST API?",
    "hints": ["Authorization bypass", "HTTP methods manipulation", "UUID prediction"],
    "answer": "IDOR exploitation techniques: 1) Changing object identifiers in requests (e.g., /api/user/123 → /api/user/124); 2) Switching HTTP methods (GET to PUT/PATCH/DELETE); 3) UUID prediction or enumeration; 4) Testing with different user contexts; 5) Mass assignment attacks through parameter pollution; 6) Testing with encoded/decoded values of the same ID.",
    "categories": ["web-app", "authorization-bypass", "api-security"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:05:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-003",
    "question": "Describe three techniques for bypassing WAF protection in SQL injection attacks",
    "hints": ["Encoding techniques", "SQL syntax manipulation", "Time-based bypasses"],
    "answer": "WAF bypass techniques: 1) Using uncommon encoding (hex, double URL encode, unicode); 2) SQL comment manipulation (/**/, --, #); 3) Case switching and whitespace manipulation; 4) Parameter pollution and JSON injection; 5) Time-based delays with benchmark() or sleep(); 6) Using CONCAT() to break up suspicious strings; 7) HTTP parameter fragmentation across multiple parameters.",
    "categories": ["web-app", "waf-bypass", "sql-injection"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:10:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-004",
    "question": "How would you exploit DOM-based XSS without alert() to avoid detection?",
    "hints": ["Stealthier payloads", "Alternative JavaScript functions", "Out-of-band techniques"],
    "answer": "Stealthier DOM XSS exploitation: 1) Use fetch() or XMLHttpRequest to exfiltrate data to controlled server; 2) Utilize window.name or postMessage for data extraction; 3) Create hidden iframes with sensitive data; 4) Use performance timing attacks to extract information; 5) CSS selectors for data extraction; 6) Browser fingerprinting and internal network detection; 7) Use atob() and btoa() for encoded data exfiltration.",
    "categories": ["web-app", "xss", "client-side-attacks"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:15:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-005",
    "question": "What are the most effective techniques for JWT exploitation?",
    "hints": ["Algorithm confusion", "Signature bypass", "Key cracking"],
    "answer": "JWT exploitation techniques: 1) Algorithm confusion attacks (changing alg to 'none'); 2) RS256 to HS256 algorithm switching; 3) Signature stripping and verification bypass; 4) Kid header manipulation (path traversal, SQL injection); 5) JKU header exploitation to point to malicious JWK; 6) Bruteforcing weak HS256 secrets; 7) Claim tampering (exp, iat, nbf); 8) JWK header injection with custom parameters.",
    "categories": ["web-app", "authentication-bypass", "jwt"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:20:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-006",
    "question": "How would you perform blind XXE exploitation to extract data?",
    "hints": ["Out-of-band techniques", "External DTDs", "Error-based extraction"],
    "answer": "Blind XXE data extraction methods: 1) Using parameter entities with external DTDs; 2) Out-of-band data exfiltration via HTTP/DNS; 3) FTP exfiltration in certain implementations; 4) Error-based XXE using file:// protocols to generate error messages with file content; 5) PHP expect:// wrapper for direct command execution; 6) Using CDATA sections to bypass XML parsing issues; 7) Utilizing UTF-16 encoding to bypass WAF filters.",
    "categories": ["web-app", "xxe", "file-read"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:25:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-007",
    "question": "Describe methods for exploiting server-side template injection (SSTI)",
    "hints": ["Template language identification", "Code execution payloads", "Sandbox escape"],
    "answer": "SSTI exploitation: 1) Identify template engine ({{7*7}}, ${7*7}, <%= 7*7 %>); 2) Java Freemarker: ${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('/etc/passwd').toURL().openStream().readAllBytes()?join(' ')}; 3) Python Jinja2: {{ ''.__class__.__mro__[1].__subclasses__() }}; 4) Twig: {{ _self.env.registerUndefinedFilterCallback('exec') }}{{ _self.env.getFilter('id') }}; 5) Sandbox escape through built-in functions and object traversal; 6) Using reflection to discover dangerous methods.",
    "categories": ["web-app", "ssti", "code-execution"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:30:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-008",
    "question": "What techniques would you use to bypass CSRF protections?",
    "hints": ["Header manipulation", "Same-site cookie bypass", "JSON CSRF"],
    "answer": "CSRF protection bypass techniques: 1) Removing Referer header or using open redirections to bypass validation; 2) Converting POST to GET requests if allowed; 3) Using Flash-based requests to bypass same-origin policy; 4) Exploiting CORS misconfigurations to make authenticated cross-origin requests; 5) JSON CSRF with Content-Type: text/plain; 6) DNS rebinding to make same-origin requests; 7) Using XSS to harvest anti-CSRF tokens; 8) Cookie tossing attacks with multiple subdomains.",
    "categories": ["web-app", "csrf-bypass", "authorization"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:35:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-009",
    "question": "How would you exploit insecure deserialization in Java applications?",
    "hints": ["Apache Commons Collections", "Gadget chains", "JRMP listener"],
    "answer": "Java deserialization exploitation: 1) Using ysoserial with CommonsCollections gadget chains; 2) JRMP listener for remote code execution; 3) Marshalsec utility for various JSON and XML deserialization attacks; 4) Memory payloads with JNDI injection; 5) Custom gadget chain discovery through source code analysis; 6) Using sleep or DNS callbacks to confirm vulnerability; 7) Bypassing input validation with encoded payloads; 8) Exploiting custom readObject() implementations.",
    "categories": ["web-app", "deserialization", "java", "rce"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:40:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-010",
    "question": "Describe methods for bypassing 2FA implementations",
    "hints": ["Status code manipulation", "Response tampering", "Session fixation"],
    "answer": "2FA bypass techniques: 1) Changing status codes (403 → 200) in Burp; 2) Removing 2FA parameters entirely from requests; 3) Using already authenticated sessions before 2FA was enabled; 4) Response manipulation to mark 2FA as completed; 5) API endpoint bypass by directly accessing post-auth endpoints; 6) Session fixation attacks; 7) OAuth token manipulation; 8) Time-of-check time-of-use (TOCTOU) race conditions; 9) Backdoor codes or default configurations.",
    "categories": ["web-app", "authentication-bypass", "2fa"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:45:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-011",
    "question": "How would you perform subdomain takeover attacks?",
    "hints": ["CNAME reconnaissance", "DNS record analysis", "Service-specific payloads"],
    "answer": "Subdomain takeover methodology: 1) Comprehensive subdomain enumeration (amass, subfinder, sublister); 2) Identifying CNAME records pointing to external services; 3) Checking for abandoned cloud services (AWS S3, Google Cloud, Azure, Heroku, GitHub Pages); 4) DNS cache snooping to find historical records; 5) Using dig/nslookup to verify dangling records; 6) Deploying service-specific takeover payloads; 7) Automated scanning with Subjack, SubOver, or HostileSubBruteforcer; 8) Monitoring for new subdomains through certificate transparency logs.",
    "categories": ["web-app", "subdomain-takeover", "reconnaissance"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:50:00Z",
    "meta": {"review_count": 0, "attack_phase": "initial-access"}
  },
  {
    "id": "web-012",
    "question": "What are the most effective GraphQL exploitation techniques?",
    "hints": ["Introspection queries", "Field duplication", "Batching attacks"],
    "answer": "GraphQL exploitation: 1) Using introspection to discover schema and sensitive fields; 2) Field duplication for ACL bypass; 3) Query batching to bypass rate limiting; 4) Directive-based attacks with @include/@skip; 5) SQL injection through arguments; 6) Nested query DoS attacks (deep recursion); 7) CSRF via GET-based queries; 8) Information disclosure through error messages; 9) Using aliases to bypass field restrictions; 10) Persisted query attacks by guessing query IDs.",
    "categories": ["web-app", "graphql", "api-security"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T10:55:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-013",
    "question": "How would you exploit race conditions in web applications?",
    "hints": ["Turbo Intruder", "Parallel requests", "TOCTOU vulnerabilities"],
    "answer": "Race condition exploitation: 1) Using Turbo Intruder with race.py script for parallel requests; 2) Account balance manipulation during transfers; 3) Coupon code reuse through rapid redemption; 4) Limited inventory bypass by simultaneous purchases; 5) File upload race conditions (upload-delete sequences); 6) User registration with same email/username; 7) Rate limit bypass through concurrent authentication attempts; 8) OAuth state parameter race conditions; 9) Using multiple tabs/sessions to exploit timing windows.",
    "categories": ["web-app", "race-condition", "logic-flaws"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:00:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-014",
    "question": "Describe techniques for exploiting OAuth misconfigurations",
    "hints": ["Redirect_uri manipulation", "Code interception", "Client secret leakage"],
    "answer": "OAuth exploitation: 1) redirect_uri manipulation with open redirects or subdomains; 2) Using stolen authorization codes with different client_id; 3) PKCE bypass if not properly implemented; 4) Cross-site request forgery in OAuth flow; 5) JWT signature verification bypass; 6) Account takeover through sub/email claim manipulation; 7) Implicit flow token leakage through referrer; 8) Client secret leakage in mobile apps; 9) Token replay attacks; 10) Scope manipulation for elevated privileges.",
    "categories": ["web-app", "oauth", "authentication-bypass"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:05:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-015",
    "question": "How would you exploit HTTP request smuggling vulnerabilities?",
    "hints": ["CL.TE vs TE.CL", "Front-end/back-end discrepancies", "Desync attacks"],
    "answer": "HTTP request smuggling techniques: 1) Identifying front-end/back-end parsing discrepancies; 2) CL.TE attacks (Content-Length vs Transfer-Encoding: chunked); 3) TE.CL attacks (Transfer-Encoding: chunked vs Content-Length); 4) H2.TE and H2.CL attacks in HTTP/2; 5) Using smuggle to automate detection; 6) Cache poisoning via request smuggling; 7) Bypassing security filters; 8) Session hijacking through request synchronization; 9) Web cache deception; 10) Response queue poisoning for stored XSS.",
    "categories": ["web-app", "request-smuggling", "protocol-attacks"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:10:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-016",
    "question": "What are advanced techniques for bypassing CSP protections?",
    "hints": ["Script gadget attacks", "JSONP endpoints", "AngularJS CSP bypass"],
    "answer": "CSP bypass techniques: 1) Using AngularJS sandbox escapes with CSP; 2) Abusing JSONP endpoints for script execution; 3) Script gadget attacks in libraries like jQuery, React, Vue; 4) DNS prefetch exfiltration; 5) Using iframe srcdoc attribute; 6) Abusing trusted types bypasses; 7) CDN whitelist bypass through subdomain takeovers; 8) Using data: or blob: URIs if allowed; 9) Dynamic code evaluation through setTimeout/Function; 10) UI redressing attacks with CSS selectors.",
    "categories": ["web-app", "csp-bypass", "xss"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:15:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-017",
    "question": "How would you exploit prototype pollution in JavaScript applications?",
    "hints": ["Object.constructor.prototype", "__proto__ manipulation", "Gadget discovery"],
    "answer": "Prototype pollution exploitation: 1) Identifying sinks that accept __proto__ or constructor.prototype; 2) Using Object.prototype pollution to control default values; 3) Chaining with existing code gadgets for XSS or RCE; 4) Bypassing input filters with different notation (obj['__proto__'] vs obj.__proto__); 5) Using JSON.parse('{\"__proto__\": {\"polluted\": true}}'); 6) DOM XSS via document.location.prototype; 7) Node.js RCE through child_process spawn; 8) Auth bypass by polluting authentication logic.",
    "categories": ["web-app", "prototype-pollution", "client-side"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:20:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },
  {
    "id": "web-018",
    "question": "Describe methods for exploiting insecure file upload functionalities",
    "hints": ["Extension bypass", "Content-Type evasion", "Polyglot files"],
    "answer": "File upload exploitation: 1) Extension bypass (.php5, .phtml, .phar, .php.png); 2) Content-Type manipulation (image/jpeg → application/x-php); 3) Using double extensions (.jpg.php); 4) Path traversal in filename (../../../shell.php); 5) Null byte injection (shell.php%00.jpg); 6) Polyglot files that are valid as both image and script; 7) .htaccess manipulation to execute images as PHP; 8) SVG XSS with JavaScript content; 9) XXE in SVG/XML file uploads; 10) Using ExifTool injection for RCE.",
    "categories": ["web-app", "file-upload", "rce"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:25:00Z",
    "meta": {"review_count": 0, "attack_phase": "initial-access"}
  },
  {
    "id": "web-019",
    "question": "How would you exploit SAML authentication vulnerabilities?",
    "hints": ["XML signature bypass", "Comment injection", "Certificate manipulation"],
    "answer": "SAML exploitation: 1) XML signature wrapping attacks; 2) Comment injection in SAML responses; 3) Using self-signed certificates to bypass validation; 4) Assertion consumer service URL manipulation; 5) Replay attacks with expired assertions; 6) XSW (XML Signature Wrapping) attacks; 7) NameID manipulation for account takeover; 8) Using deprecated SHA1 algorithms; 9) Certificate fuzzing to find weak keys; 10) Entity expansion attacks for DoS or bypass.",
    "categories": ["web-app", "saml", "authentication-bypass"],
    "difficulty": "hard",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:30:00Z",
    "meta": {"review_count": 0, "attack_phase": "authentication"}
  },
  {
    "id": "web-020",
    "question": "What are techniques for exploiting WebSocket vulnerabilities?",
    "hints": ["Message manipulation", "Origin bypass", "CSRF over WebSockets"],
    "answer": "WebSocket exploitation: 1) Cross-site WebSocket hijacking (CSWSH) with Origin bypass; 2) Input validation bypass through message fragmentation; 3) SQL injection via WebSocket messages; 4) XSS through message content injection; 5) Authentication bypass by manipulating handshake requests; 6) DoS through resource exhaustion with large messages; 7) Business logic flaws in stateful WebSocket communications; 8) SSL/TLS stripping attacks; 9) Using Burp Suite's WebSocket tab to manipulate messages; 10) Session fixation through WebSocket connections.",
    "categories": ["web-app", "websocket", "realtime-protocols"],
    "difficulty": "medium",
    "grasped": false,
    "usefulness": "dangerous",
    "created_at": "2025-09-09T11:35:00Z",
    "meta": {"review_count": 0, "attack_phase": "exploitation"}
  },

{
"id": "web-021",
"question": "How would you exploit DNS rebinding attacks to bypass same-origin policy?",
"hints": ["TTL manipulation", "Multiple IP addresses", "Browser-based attacks"],
"answer": "DNS rebinding exploitation: 1) Controlling a domain with very low TTL to switch IPs rapidly; 2) Using multiple A records to point to both attacker-controlled and target internal IPs; 3) Forcing the browser to make requests to internal services by rebinding the domain to an internal IP after initial load; 4) Bypassing firewalls and accessing internal networks; 5) Using WebRTC or other APIs to discover internal IP ranges; 6) Tools like Singularity of Origin to automate the attack; 7) Combining with browser vulnerabilities to enhance effectiveness.",
"categories": ["web-app", "dns-rebinding", "sop-bypass"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T11:40:00Z",
"meta": {"review_count": 0, "attack_phase": "initial-access"}
},
{
"id": "web-022",
"question": "Describe advanced techniques for exploiting SSRF to access cloud metadata services",
"hints": ["URL whitelist bypass", "IP encoding", "Cloud-specific endpoints"],
"answer": "SSRF cloud metadata exploitation: 1) Using alternate IP representations (decimal, hex, octal) to bypass filters; 2) Domain redirection to resolve to internal IPs; 3) Exploiting URL parser differences (e.g., http://169.254.169.254@attacker.com/); 4) Targeting cloud metadata endpoints (AWS: 169.254.169.254, GCP: 169.254.169.254, Azure: 169.254.169.254); 5) Using DNS rebinding to access metadata; 6) HTTP header injection to modify Host headers; 7) File protocol abuse to read local files; 8) Gopher protocol for internal service exploitation; 9) Blind SSRF to exfiltrate data via DNS or HTTP.",
"categories": ["web-app", "ssrf", "cloud-metadata"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T11:45:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-023",
"question": "What are the methods for exploiting path traversal vulnerabilities in modern applications?",
"hints": ["Encoding bypass", "Null byte injection", "Absolute path bypass"],
"answer": "Path traversal exploitation: 1) Using ../ sequences with URL encoding (%2e%2e%2f), double encoding (%252e%252e%252f), or UTF-8 encoding; 2) Null byte injection (%00) to truncate file extensions; 3) Absolute path bypass (/etc/passwd); 4) Using alternative path separators (\\ on Windows); 5) Path normalization bypasses (....// or ..././); 6) Container escape techniques (../../../proc/self/environ); 7) File inclusion to RCE via log files or proc; 8) Bypassing file extension checks with path traversal after the extension (file.php/.././etc/passwd); 9) Using zip slip attacks in file uploads.",
"categories": ["web-app", "path-traversal", "file-read"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T11:50:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-024",
"question": "How would you exploit command injection vulnerabilities with filter bypasses?",
"hints": ["Character escaping", "Environment variables", "Command concatenation"],
"answer": "Command injection bypass techniques: 1) Using backticks (command), $() substitution, or semicolons; 2) Environment variable injection ($(env)); 3) Concatenation with operators (|, ||, &, &&); 4) Encoding commands in base64 or hex; 5) Using wildcards (*) and pattern expansion; 6) Injecting into arguments rather than full commands; 7) Abusing internal field separators (IFS); 8) Using named pipes or process substitution; 9) Blind injection with sleep, DNS, or HTTP callbacks; 10) Bypassing blacklists with case manipulation, whitespace, or tab characters.",
"categories": ["web-app", "command-injection", "rce"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T11:55:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-025",
"question": "Describe techniques for exploiting insecure redirects and open redirects for phishing",
"hints": ["Parameter manipulation", "URL encoding", "Header injection"],
"answer": "Open redirect exploitation: 1) Manipulating redirect parameters (url, next, return) to point to malicious sites; 2) Using URL encoding to bypass validation; 3) Header injection via Host or Location headers; 4) Abusing JavaScript-based redirects (window.location); 5) Using data: or javascript: URIs; 6) DOM-based open redirects; 7) Bypassing domain whitelists with subdomains (evil.com?target=trusted.com); 8) Using double redirects to obscure the final URL; 9) Combining with XSS or other attacks for enhanced phishing; 10) Exploiting OAuth or SAML redirects for token theft.",
"categories": ["web-app", "open-redirect", "phishing"],
"difficulty": "easy",
"grasped": false,
"usefulness": "useful",
"created_at": "2025-09-09T12:00:00Z",
"meta": {"review_count": 0, "attack_phase": "initial-access"}
},
{
"id": "web-026",
"question": "How would you exploit clickjacking vulnerabilities to perform unauthorized actions?",
"hints": ["IFrame overlays", "CSS manipulation", "Frame busting bypass"],
"answer": "Clickjacking exploitation: 1) Creating transparent IFrames overlaying legitimate buttons; 2) Using CSS opacity and positioning to hide malicious frames; 3) Bypassing frame busting with X-Frame-Options abuse; 4) Using multiple layers for complex UI redressing; 5) Exploiting drag-and-drop actions with hidden elements; 6) Combining with CSRF tokens captured via XSS; 7) Targeting social media buttons for likes/shares; 8) Using browser extensions to automate clickjacking; 9) Exploiting mobile touch events; 10) DOM-based clickjacking with JavaScript control.",
"categories": ["web-app", "clickjacking", "ui-redressing"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:05:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-027",
"question": "What are advanced methods for exploiting HTTP host header attacks?",
"hints": ["Header injection", "Cache poisoning", "Password reset poisoning"],
"answer": "Host header exploitation: 1) Injecting malicious Host headers to poison caches; 2) Bypassing password reset functionality by manipulating Host headers; 3) Using absolute URLs in redirects to control the destination; 4) Exploiting virtual host routing to access internal sites; 5) XSS via Host header reflection; 6) SQL injection through Host header usage in logs; 7) Business logic flaws that rely on Host header values; 8) Using X-Forwarded-Host or other proxy headers to bypass checks; 9) DNS rebinding combined with Host header manipulation; 10) Web cache deception via Host header attacks.",
"categories": ["web-app", "host-header", "cache-poisoning"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:10:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-028",
"question": "How would you exploit password reset functionality flaws for account takeover?",
"hints": ["Token leakage", "Response manipulation", "Email hijacking"],
"answer": "Password reset exploitation: 1) Token leakage via Referer header or logs; 2) Predictable reset tokens (time-based, user ID-based); 3) Host header poisoning to send reset links to attacker domains; 4) Response manipulation to change the email or password in the response; 5) Account enumeration based on reset response differences; 6) Using XSS to steal reset tokens; 7) DNS takeover to intercept reset emails; 8) SMTP injection in email parameters; 9) Brute-forcing short reset tokens; 10) Exploiting race conditions in token usage.",
"categories": ["web-app", "password-reset", "account-takeover"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:15:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-029",
"question": "Describe techniques for exploiting business logic flaws in e-commerce applications",
"hints": ["Price manipulation", "Negative quantities", "Race conditions"],
"answer": "Business logic exploitation: 1) Price manipulation via parameter tampering (e.g., changing price in HTTP request); 2) Using negative quantities to cause refunds or credit; 3) Race conditions in inventory management or payment processing; 4) Coupon code abuse through brute force or reuse; 5) Loyalty point manipulation by altering point values; 6) Bypassing age verification or other restrictions; 7) Exploiting gift card balance flaws; 8) Order duplication through replay attacks; 9) Shipping address manipulation to intercept packages; 10) Return fraud by swapping items or false claims.",
"categories": ["web-app", "business-logic", "e-commerce"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:20:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-030",
"question": "How would you exploit API abuses such as rate limiting bypass or endpoint discovery?",
"hints": ["Header manipulation", "IP rotation", "GraphQL introspection"],
"answer": "API abuse techniques: 1) Bypassing rate limits by changing X-Forwarded-For headers or using IP rotation; 2) Discovering hidden endpoints via fuzzing or directory brute force; 3) Using GraphQL introspection to expose all queries and mutations; 4) Parameter pollution to bypass validation; 5) Mass assignment attacks by sending unexpected parameters; 6) Exploiting pagination to extract large datasets; 7) HTTP verb tampering (GET vs POST) to bypass controls; 8) JWT token cracking or manipulation; 9) API version manipulation to access deprecated endpoints; 10) Using API keys from mobile apps via reverse engineering.",
"categories": ["web-app", "api-abuse", "rate-limit-bypass"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:25:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-031",
"question": "What are methods for exploiting CORS misconfigurations to steal sensitive data?",
"hints": ["Origin reflection", "Null origin", "Wildcard misuse"],
"answer": "CORS exploitation: 1) Exploiting reflected Origin headers to allow arbitrary domains; 2) Using null origin (data: URLs) to bypass checks; 3) Abusing wildcard (*) origins with credentials allowed; 4) Pre-flight request bypass by using simple requests; 5) DNS spoofing to match allowed origins; 6) Using XSS to make cross-origin requests with credentials; 7) Stealing data via AJAX requests to internal endpoints; 8) Combining with other attacks like CSRF or XSS; 9) Exploiting subdomain trust relationships; 10) Using CORS to bypass SOP and access internal APIs.",
"categories": ["web-app", "cors", "data-exfiltration"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:30:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-032",
"question": "How would you exploit remote file inclusion (RFI) vulnerabilities for code execution?",
"hints": ["URL wrappers", "Protocol filtering bypass", "Log poisoning"],
"answer": "RFI exploitation: 1) Using http:// or ftp:// wrappers to include remote files; 2) Bypassing protocol filters with case manipulation or encoding; 3) Using data: or php://input wrappers for direct code execution; 4) Log poisoning by including access logs or error logs; 5) Combining with file upload to execute uploaded files; 6) Using SMB shares for Windows-based RFI; 7) DNS rebinding to include internal files; 8) Remote code execution via included scripts; 9) Bypassing allow_url_include restrictions; 10) Using expect:// wrapper for command execution.",
"categories": ["web-app", "rfi", "rce"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:35:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-033",
"question": "Describe techniques for exploiting session management flaws such as session fixation",
"hints": ["Session token manipulation", "Cookie forcing", "Cross-site leakage"],
"answer": "Session fixation exploitation: 1) Forcing a known session ID on a user before login; 2) Using Set-Cookie headers or meta tags to set session cookies; 3) Exploiting login endpoints that don't regenerate session IDs; 4) Cross-site leakage of session IDs via Referer or logs; 5) Session prediction based on weak random number generation; 6) Session hijacking via XSS or network sniffing; 7) Using secure flag or HttpOnly bypasses to steal cookies; 8) Session timeout manipulation to extend session life; 9) Concurrent session exploitation; 10) Browser cache storing session tokens.",
"categories": ["web-app", "session-fixation", "session-management"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:40:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-034",
"question": "How would you exploit HTTP verb tampering to bypass access controls?",
"hints": ["Method override", "HEAD vs GET", "PUT and DELETE abuse"],
"answer": "HTTP verb tampering: 1) Using HEAD instead of GET to bypass authentication; 2) Exploiting PUT and DELETE methods for file upload or deletion; 3) Method override with X-HTTP-Method-Override header; 4) Using OPTIONS to discover allowed methods; 5) TRACE method for XST (cross-site tracing) attacks; 6) Bypassing CSRF protections by changing verbs; 7) Using arbitrary verbs (e.g., DEBUG) to trigger vulnerabilities; 8) Combining with path traversal for file operations; 9) Authentication bypass by using different verbs on login endpoints; 10) Web server configuration flaws allowing dangerous methods.",
"categories": ["web-app", "verb-tampering", "access-control-bypass"],
"difficulty": "medium",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:45:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-035",
"question": "What are techniques for exploiting web cache deception to steal sensitive information?",
"hints": ["Path manipulation", "Cache key flaws", "Content extraction"],
"answer": "Web cache deception: 1) Forcing cacheable paths to store sensitive content (e.g., /profile.php/nonexistent.css); 2) Manipulating cache keys via query parameters or headers; 3) Using URL encoding to vary cache keys; 4) Exploiting cache hierarchy to poison shared caches; 5) Extracting cached data by accessing the poisoned cache entry; 6) Combining with XSS to steal cached data; 7) Bypassing cache controls with special headers; 8) Targeting dynamic content that should not be cached; 9) Using HTTP request smuggling to poison caches; 10) Time-based attacks to predict cache expiration.",
"categories": ["web-app", "cache-deception", "data-theft"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:50:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-036",
"question": "How would you exploit local file inclusion (LFI) to achieve remote code execution?",
"hints": ["Log injection", "PHP wrappers", "File upload combination"],
"answer": "LFI to RCE techniques: 1) Injecting PHP code into log files (access.log, error.log) and including them; 2) Using php://input wrapper to execute POST data; 3) Using data: wrapper to include base64-encoded code; 4) Combining with file upload to include uploaded files; 5) Using /proc/self/environ to inject code via User-Agent; 6) /proc/fd/ inclusion for temporary files; 7) PHP expect:// wrapper for command execution; 8) Using SSH auth logs or mail logs for injection; 9) Windows event logs or other log sources; 10) Environment variable manipulation via /proc/self/environ.",
"categories": ["web-app", "lfi", "rce"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T12:55:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-037",
"question": "Describe methods for exploiting cross-site request forgery (CSRF) with advanced bypasses",
"hints": ["Header manipulation", "Content-Type bypass", "Same-site cookie exploitation"],
"answer": "CSRF advanced bypasses: 1) Using GET requests for state-changing actions if allowed; 2) Bypassing Content-Type checks by using text/plain or multipart/form-data; 3) Exploiting same-site cookie restrictions with subdomain takeovers; 4) Using Flash or Java applets to make cross-origin requests; 5) DNS rebinding to make same-origin CSRF requests; 6) Using XSS to harvest anti-CSRF tokens; 7) Frame-based attacks with relaxed X-Frame-Options; 8) Method overriding with POST-to-GET converters; 9) Using mobile apps to initiate CSRF via deep links; 10) CORS misconfigurations to make authenticated requests.",
"categories": ["web-app", "csrf-bypass", "authorization"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T13:00:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-038",
"question": "How would you exploit server-side request forgery (SSRF) to scan internal networks?",
"hints": ["Time-based detection", "DNS exfiltration", "Port scanning"],
"answer": "SSRF internal scanning: 1) Using time delays to detect open ports (e.g., connection timeout vs refusal); 2) DNS exfiltration to reveal internal IPs via subdomains; 3) Blind SSRF to identify services by response differences; 4) Using gopher:// to interact with internal protocols (Redis, Memcached); 5) FTP PASV mode to scan ports; 6) Exploiting HTTP redirects to amplify scanning; 7) Combining with XXE to read scanning results; 8) Using Cloud Metadata services to gain initial foothold; 9) Automated tools like SSRFmap to exploit vulnerabilities; 10) Bypassing filters with IP encoding or domain redirection.",
"categories": ["web-app", "ssrf", "network-scanning"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T13:05:00Z",
"meta": {"review_count": 0, "attack_phase": "reconnaissance"}
},
{
"id": "web-039",
"question": "What are techniques for exploiting XML external entity (XXE) in non-traditional contexts?",
"hints": ["File upload", "DOCX/PDF parsing", "Content-Type manipulation"],
"answer": "XXE in non-traditional contexts: 1) Exploiting XXE in file uploads (SVG, DOCX, PDF); 2) Using content-type manipulation to force XML parsing; 3) SOAP API endpoints that process XML; 4) Excel files with XML components; 5) RSS feeds or other XML-based feeds; 6) XMPP or other messaging protocols; 7) Android intent-based XXE; 8) Local DTD inclusion to bypass filters; 9) Using PHP expect wrapper within XXE; 10) Out-of-band data exfiltration via FTP or HTTP.",
"categories": ["web-app", "xxe", "file-upload"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T13:10:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
},
{
"id": "web-040",
"question": "How would you exploit insecure deserialization in .NET applications?",
"hints": ["BinaryFormatter", "LosFormatter", "ViewState manipulation"],
"answer": ".NET deserialization exploitation: 1) Using BinaryFormatter with malicious payloads; 2) Exploiting LosFormatter for ViewState deserialization; 3) Using ObjectStateFormatter in ASP.NET; 4) Gadget chains with DataSet or DataTable; 5) XMLSerializer vulnerabilities; 6) SoapFormatter attacks; 7) Using TypeConfuseDelegate or similar gadgets; 8) Bypassing ViewState MAC validation; 9) Tools like ysoserial.net for payload generation; 10) Remote code execution via deserialization endpoints.",
"categories": ["web-app", "deserialization", "dotnet", "rce"],
"difficulty": "hard",
"grasped": false,
"usefulness": "dangerous",
"created_at": "2025-09-09T13:15:00Z",
"meta": {"review_count": 0, "attack_phase": "exploitation"}
}






]